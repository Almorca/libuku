<?php
/* Driver template for the PHP_Haanga_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class Haanga_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof Haanga_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof Haanga_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof Haanga_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof Haanga_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class Haanga_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 2 "lib/Haanga/Compiler/Parser.y"

/*
  +---------------------------------------------------------------------------------+
  | Copyright (c) 2010 César Rodas and Menéame Comunicacions S.L.                   |
  +---------------------------------------------------------------------------------+
  | Redistribution and use in source and binary forms, with or without              |
  | modification, are permitted provided that the following conditions are met:     |
  | 1. Redistributions of source code must retain the above copyright               |
  |    notice, this list of conditions and the following disclaimer.                |
  |                                                                                 |
  | 2. Redistributions in binary form must reproduce the above copyright            |
  |    notice, this list of conditions and the following disclaimer in the          |
  |    documentation and/or other materials provided with the distribution.         |
  |                                                                                 |
  | 3. All advertising materials mentioning features or use of this software        |
  |    must display the following acknowledgement:                                  |
  |    This product includes software developed by César D. Rodas.                  |
  |                                                                                 |
  | 4. Neither the name of the César D. Rodas nor the                               |
  |    names of its contributors may be used to endorse or promote products         |
  |    derived from this software without specific prior written permission.        |
  |                                                                                 |
  | THIS SOFTWARE IS PROVIDED BY CÉSAR D. RODAS ''AS IS'' AND ANY                   |
  | EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED       |
  | WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          |
  | DISCLAIMED. IN NO EVENT SHALL CÉSAR D. RODAS BE LIABLE FOR ANY                  |
  | DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES      |
  | (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;    |
  | LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND     |
  | ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT      |
  | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS   |
  | SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE                     |
  +---------------------------------------------------------------------------------+
  | Authors: César Rodas <crodas@php.net>                                           |
  +---------------------------------------------------------------------------------+
*/
#line 136 "lib/Haanga/Compiler/Parser.php"

// declare_class is output here
#line 39 "lib/Haanga/Compiler/Parser.y"
 class Haanga_Compiler_Parser #line 141 "lib/Haanga/Compiler/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 40 "lib/Haanga/Compiler/Parser.y"

    protected $lex;
    protected $file;

    function __construct($lex, $file='')
    {
        $this->lex  = $lex;
        $this->file = $file;
    }

    function Error($text)
    {
        throw new Haanga_Compiler_Exception($text.' in '.$this->file.':'.$this->lex->getLine());
    }

#line 162 "lib/Haanga/Compiler/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_TAG_OPEN                     =  1;
    const T_NOT                          =  2;
    const T_AND                          =  3;
    const T_OR                           =  4;
    const T_EQ                           =  5;
    const T_NE                           =  6;
    const T_GT                           =  7;
    const T_GE                           =  8;
    const T_LT                           =  9;
    const T_LE                           = 10;
    const T_IN                           = 11;
    const T_PLUS                         = 12;
    const T_MINUS                        = 13;
    const T_CONCAT                       = 14;
    const T_TIMES                        = 15;
    const T_DIV                          = 16;
    const T_MOD                          = 17;
    const T_PIPE                         = 18;
    const T_BITWISE                      = 19;
    const T_HTML                         = 20;
    const T_COMMENT                      = 21;
    const T_PRINT_OPEN                   = 22;
    const T_PRINT_CLOSE                  = 23;
    const T_EXTENDS                      = 24;
    const T_TAG_CLOSE                    = 25;
    const T_INCLUDE                      = 26;
    const T_AUTOESCAPE                   = 27;
    const T_CUSTOM_END                   = 28;
    const T_CUSTOM_TAG                   = 29;
    const T_AS                           = 30;
    const T_CUSTOM_BLOCK                 = 31;
    const T_SPACEFULL                    = 32;
    const T_WITH                         = 33;
    const T_SET                          = 34;
    const T_ASSIGN                       = 35;
    const T_LOAD                         = 36;
    const T_FOR                          = 37;
    const T_COMMA                        = 38;
    const T_STEP                         = 39;
    const T_EMPTY                        = 40;
    const T_IF                           = 41;
    const T_ELSE                         = 42;
    const T_IFCHANGED                    = 43;
    const T_IFEQUAL                      = 44;
    const T_IFNOTEQUAL                   = 45;
    const T_BLOCK                        = 46;
    const T_FILTER                       = 47;
    const T_REGROUP                      = 48;
    const T_BY                           = 49;
    const T_COLON                        = 50;
    const T_TRUE                         = 51;
    const T_FALSE                        = 52;
    const T_STRING                       = 53;
    const T_INTL                         = 54;
    const T_RPARENT                      = 55;
    const T_LPARENT                      = 56;
    const T_OBJ                          = 57;
    const T_DOT                          = 58;
    const T_ALPHA                        = 59;
    const T_CLASS                        = 60;
    const T_BRACKETS_OPEN                = 61;
    const T_BRACKETS_CLOSE               = 62;
    const T_DOTDOT                       = 63;
    const T_NUMERIC                      = 64;
    const YY_NO_ACTION = 354;
    const YY_ACCEPT_ACTION = 353;
    const YY_ERROR_ACTION = 352;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1293;
static public $yy_action = array(
 /*     0 */    48,  128,   47,   89,  164,   39,  258,   41,  175,   88,
 /*    10 */    76,  255,   93,   61,  238,  146,  239,   33,  160,   40,
 /*    20 */    37,   35,   56,   53,   52,   48,  128,   47,   89,  163,
 /*    30 */    39,  115,   41,  175,   88,   76,  243,   93,   61,  242,
 /*    40 */   147,  222,   33,  162,   40,   37,   35,   56,   53,   52,
 /*    50 */    48,  128,   47,   89,  151,   39,   94,   41,  175,   88,
 /*    60 */    76,  243,   93,   61,  109,  144,  103,   33,  154,   40,
 /*    70 */    37,   35,   56,   53,   52,   48,  128,   47,   89,  172,
 /*    80 */    39,  195,   41,  175,   88,   76,  243,   93,   61,   72,
 /*    90 */   142,  167,   33,   50,   40,   37,   35,   56,   53,   52,
 /*   100 */    48,  128,   47,   89,  189,   39,  110,   41,  175,   88,
 /*   110 */    76,  243,   93,   61,  205,  173,   71,   33,  184,   40,
 /*   120 */    37,   35,   56,   53,   52,   48,   79,   47,   89,  185,
 /*   130 */    39,  126,   41,  175,   88,   76,   57,   93,   61,  235,
 /*   140 */   149,  248,   33,  186,   40,   37,   35,   56,   53,   52,
 /*   150 */    48,   57,   47,   89,  169,   39,  237,   41,  175,   88,
 /*   160 */    76,   57,   93,   61,  353,   69,  234,   33,  211,   40,
 /*   170 */    37,   35,   56,   53,   52,   48,  213,   47,   89,  177,
 /*   180 */    39,  204,   41,  175,   88,   76,   57,   93,   61,   26,
 /*   190 */    26,  259,   33,  106,   40,   37,   35,   56,   53,   52,
 /*   200 */    48,  171,   47,   89,   92,   39,  261,   41,  175,   88,
 /*   210 */    76,   57,   93,   61,  236,  262,  224,   33,  233,   40,
 /*   220 */    37,   35,   56,   53,   52,   48,  221,   47,   89,  187,
 /*   230 */    39,  102,   41,  175,   88,   76,  251,   93,   61,  199,
 /*   240 */   104,  107,   33,  194,   40,   37,   35,   56,   53,   52,
 /*   250 */    48,  129,   47,   89,  179,   39,  198,   41,  175,   88,
 /*   260 */    76,  192,   93,   61,  217,  214,  240,   33,  197,   40,
 /*   270 */    37,   35,   56,   53,   52,   48,   60,   47,   89,  174,
 /*   280 */    39,  241,   41,  175,   88,   76,   95,   93,   61,   98,
 /*   290 */   200,  132,   33,  139,   40,   37,   35,   56,   53,   52,
 /*   300 */    48,   66,   47,   89,  153,   39,  131,   41,  175,   88,
 /*   310 */    76,   67,   93,   61,  136,   84,   87,   33,  134,   40,
 /*   320 */    37,   35,   56,   53,   52,   48,   65,   47,   89,  161,
 /*   330 */    39,  135,   41,  175,   88,   76,  133,   93,   61,  227,
 /*   340 */    99,   64,   33,  155,   40,   37,   35,   56,   53,   52,
 /*   350 */    48,   73,   47,   89,  188,   39,  125,   41,  175,   88,
 /*   360 */    76,   78,   93,   61,   68,   90,  123,   33,  130,   40,
 /*   370 */    37,   35,   56,   53,   52,   48,   74,   47,   89,  156,
 /*   380 */    39,   70,   41,  175,   88,   76,   63,   93,   61,   59,
 /*   390 */    91,   85,   33,  182,   40,   37,   35,   56,   53,   52,
 /*   400 */    48,   81,   47,   89,  152,   39,   62,   41,  175,   88,
 /*   410 */    76,  182,   93,   61,  182,  182,  182,   33,  182,   40,
 /*   420 */    37,   35,   56,   53,   52,   48,  182,   47,   89,  158,
 /*   430 */    39,  182,   41,  175,   88,   76,  182,   93,   61,  182,
 /*   440 */   182,  182,   33,  182,   40,   37,   35,   56,   53,   52,
 /*   450 */    48,  182,   47,   89,  150,   39,  170,   41,  175,   88,
 /*   460 */    76,  182,   93,   61,  182,  182,  182,   33,  263,   40,
 /*   470 */    37,   35,   56,   53,   52,   30,   31,   24,   24,   24,
 /*   480 */    24,   24,   24,   24,   32,   32,   32,   25,   25,   25,
 /*   490 */    26,   26,   48,  182,   47,   89,   58,   39,  182,   41,
 /*   500 */   175,   88,   76,  182,   93,   61,  216,  215,  216,   33,
 /*   510 */   138,   40,   37,   35,   56,   53,   52,  159,   96,  207,
 /*   520 */   182,   48,  182,   47,   89,  157,   39,  228,   41,  175,
 /*   530 */    88,   76,   51,   93,   61,  182,  216,  182,   33,  182,
 /*   540 */    40,   37,   35,   56,   53,   52,   48,  182,   47,   89,
 /*   550 */   181,   39,  182,   41,  175,   88,   76,  182,   93,   61,
 /*   560 */   182,   75,  182,   33,   57,   40,   37,   35,   56,   53,
 /*   570 */    52,   30,   31,   24,   24,   24,   24,   24,   24,   24,
 /*   580 */    32,   32,   32,   25,   25,   25,   26,   26,  140,  140,
 /*   590 */   182,  141,   46,  111,   48,   86,   47,   89,  182,   39,
 /*   600 */   182,   41,  175,   88,   76,  182,   93,   61,  182,  182,
 /*   610 */   182,   33,  182,   40,   37,   35,   56,   53,   52,   30,
 /*   620 */    31,   24,   24,   24,   24,   24,   24,   24,   32,   32,
 /*   630 */    32,   25,   25,   25,   26,   26,   31,   24,   24,   24,
 /*   640 */    24,   24,   24,   24,   32,   32,   32,   25,   25,   25,
 /*   650 */    26,   26,   24,   24,   24,   24,   24,   24,   24,   32,
 /*   660 */    32,   32,   25,   25,   25,   26,   26,  170,  254,  182,
 /*   670 */    28,  206,  182,  206,  218,  168,  218,  182,  137,  245,
 /*   680 */   182,  170,  209,  218,   82,  218,  128,  210,  117,  182,
 /*   690 */   232,  218,   49,  182,  225,  230,  243,  218,  182,  218,
 /*   700 */   218,  206,   38,  138,  219,  212,  212,  205,  173,  182,
 /*   710 */   208,  182,  207,  219,  218,  182,  182,  182,  215,  231,
 /*   720 */   231,  205,  173,  182,   27,  182,  182,  219,  182,   83,
 /*   730 */   191,  182,  215,  180,  190,  193,  203,  201,  202,  196,
 /*   740 */   220,  250,  182,  182,  170,  226,  182,  113,  140,  140,
 /*   750 */   182,  141,   46,  170,  182,  168,  252,  182,  182,  182,
 /*   760 */   218,   77,  218,  182,  182,  101,  128,  182,  229,  218,
 /*   770 */   232,  218,  182,  182,  225,  230,  243,  218,   49,  182,
 /*   780 */    29,  182,  212,  212,  205,  173,  218,  182,  182,  182,
 /*   790 */   219,  212,  212,  205,  173,  215,  170,  182,  168,  219,
 /*   800 */   182,  182,  140,  140,  215,  141,   46,  170,  105,  128,
 /*   810 */   170,  116,  218,  232,  218,  182,  182,  225,  230,  243,
 /*   820 */   182,   49,  114,  218,  182,  218,  218,  182,  218,  218,
 /*   830 */   182,  182,  182,  182,  212,  212,  205,  173,  182,  182,
 /*   840 */   218,  182,  219,  218,  182,  182,  182,  215,  212,  212,
 /*   850 */   205,  173,  182,  219,  182,  182,  219,  170,  215,  182,
 /*   860 */   244,  215,  182,  168,  218,  182,  218,  182,  182,   97,
 /*   870 */   182,  170,  182,  218,  128,  218,  121,  182,  232,  182,
 /*   880 */    23,  218,  225,  230,  243,  182,  182,  218,  182,  218,
 /*   890 */   218,  182,  182,  182,  219,  212,  212,  205,  173,  247,
 /*   900 */   246,   55,  182,  219,  218,    9,  182,  182,  215,  212,
 /*   910 */   212,  205,  173,  182,  182,  182,  182,  219,  170,  182,
 /*   920 */   168,  182,  215,  182,  247,  246,   55,  168,  182,  182,
 /*   930 */   182,  128,  143,  122,  218,  232,  218,  182,  128,  225,
 /*   940 */   230,  243,  232,  124,  182,  182,   36,  230,  243,  145,
 /*   950 */   165,  218,  207,  243,  182,  168,  231,  231,  205,  173,
 /*   960 */   182,  182,  182,  182,  219,  182,  128,  168,  120,  215,
 /*   970 */   232,  182,  182,  182,  225,  230,  243,  182,  128,  168,
 /*   980 */   118,  182,  232,  182,  182,  182,  225,  230,  243,  182,
 /*   990 */   128,  168,  148,  182,  232,  182,  182,  182,  225,  230,
 /*  1000 */   243,  182,  128,  182,  119,  168,  232,  182,  182,  182,
 /*  1010 */   225,  230,  243,  182,  182,  182,  128,  182,  127,  182,
 /*  1020 */   232,   45,  168,  182,  225,  230,  243,  182,  140,  140,
 /*  1030 */   249,  141,   46,  128,  349,  168,  100,  232,  168,  182,
 /*  1040 */    54,   34,  230,  243,  108,  182,  128,  182,  182,  128,
 /*  1050 */   232,  182,  182,  232,  166,  230,  243,  178,  230,  243,
 /*  1060 */   182,  182,  140,  140,  260,  141,   46,  182,  140,  140,
 /*  1070 */   182,  141,   46,  182,  137,   42,  140,  140,  209,  141,
 /*  1080 */    46,  256,  182,  210,  260,  182,  140,  140,  182,  141,
 /*  1090 */    46,  182,  182,   80,  137,   43,  182,  182,  209,  182,
 /*  1100 */   112,  182,  182,  210,  182,   25,   25,   25,   26,   26,
 /*  1110 */   223,  182,  182,  140,  140,  260,  141,   46,  182,  182,
 /*  1120 */   140,  140,  182,  141,   46,  137,   44,  182,   12,  209,
 /*  1130 */    45,    1,  140,  140,  210,  141,   46,  140,  140,   17,
 /*  1140 */   141,   46,  140,  140,   13,  141,   46,  247,  246,   55,
 /*  1150 */   247,  246,   55,    3,  182,  182,  182,  182,  247,  246,
 /*  1160 */    55,   10,  182,  247,  246,   55,  140,  140,   14,  141,
 /*  1170 */    46,    7,  247,  246,   55,   11,  182,  182,  182,  182,
 /*  1180 */   247,  246,   55,    2,  182,  182,  182,  247,  246,   55,
 /*  1190 */   247,  246,   55,   15,  247,  246,   55,  183,    8,  182,
 /*  1200 */   182,  182,  247,  246,   55,  182,    5,  137,  182,  182,
 /*  1210 */   176,  209,  247,  246,   55,  182,  210,  247,  246,   55,
 /*  1220 */   137,  182,  253,  182,  209,  247,  246,   55,  182,  210,
 /*  1230 */   182,  137,  137,  257,    6,  209,  209,   18,  182,  182,
 /*  1240 */   210,  210,   21,  137,  182,   20,  182,  209,  182,    4,
 /*  1250 */   182,  182,  210,  247,  246,   55,  247,  246,   55,   19,
 /*  1260 */   182,  247,  246,   55,  247,  246,   55,   22,  247,  246,
 /*  1270 */    55,   16,  182,  182,  182,  182,  182,  182,  247,  246,
 /*  1280 */    55,  182,  182,  182,  182,  182,  247,  246,   55,  182,
 /*  1290 */   247,  246,   55,
    );
    static public $yy_lookahead = array(
 /*     0 */    24,   81,   26,   27,   28,   29,   25,   31,   32,   33,
 /*    10 */    34,   91,   36,   37,   25,   70,   25,   41,   42,   43,
 /*    20 */    44,   45,   46,   47,   48,   24,   81,   26,   27,   28,
 /*    30 */    29,   25,   31,   32,   33,   34,   91,   36,   37,   25,
 /*    40 */    70,   64,   41,   42,   43,   44,   45,   46,   47,   48,
 /*    50 */    24,   81,   26,   27,   28,   29,   25,   31,   32,   33,
 /*    60 */    34,   91,   36,   37,   25,   70,   25,   41,   42,   43,
 /*    70 */    44,   45,   46,   47,   48,   24,   81,   26,   27,   28,
 /*    80 */    29,   25,   31,   32,   33,   34,   91,   36,   37,   67,
 /*    90 */    70,   40,   41,   63,   43,   44,   45,   46,   47,   48,
 /*   100 */    24,   81,   26,   27,   28,   29,   25,   31,   32,   33,
 /*   110 */    34,   91,   36,   37,   53,   54,   67,   41,   42,   43,
 /*   120 */    44,   45,   46,   47,   48,   24,   67,   26,   27,   28,
 /*   130 */    29,   81,   31,   32,   33,   34,   18,   36,   37,   25,
 /*   140 */    90,   23,   41,   42,   43,   44,   45,   46,   47,   48,
 /*   150 */    24,   18,   26,   27,   28,   29,   25,   31,   32,   33,
 /*   160 */    34,   18,   36,   37,   66,   67,   25,   41,   25,   43,
 /*   170 */    44,   45,   46,   47,   48,   24,   55,   26,   27,   28,
 /*   180 */    29,   25,   31,   32,   33,   34,   18,   36,   37,   18,
 /*   190 */    19,   25,   41,   25,   43,   44,   45,   46,   47,   48,
 /*   200 */    24,   53,   26,   27,   28,   29,   25,   31,   32,   33,
 /*   210 */    34,   18,   36,   37,   25,   25,   25,   41,   25,   43,
 /*   220 */    44,   45,   46,   47,   48,   24,   62,   26,   27,   28,
 /*   230 */    29,   25,   31,   32,   33,   34,   25,   36,   37,   25,
 /*   240 */    25,   25,   41,   25,   43,   44,   45,   46,   47,   48,
 /*   250 */    24,   81,   26,   27,   28,   29,   25,   31,   32,   33,
 /*   260 */    34,   25,   36,   37,   25,   25,   25,   41,   25,   43,
 /*   270 */    44,   45,   46,   47,   48,   24,   67,   26,   27,   28,
 /*   280 */    29,   25,   31,   32,   33,   34,   25,   36,   37,   25,
 /*   290 */    68,   81,   41,   81,   43,   44,   45,   46,   47,   48,
 /*   300 */    24,   67,   26,   27,   28,   29,   81,   31,   32,   33,
 /*   310 */    34,   67,   36,   37,   81,   67,   67,   41,   81,   43,
 /*   320 */    44,   45,   46,   47,   48,   24,   67,   26,   27,   28,
 /*   330 */    29,   81,   31,   32,   33,   34,   81,   36,   37,   85,
 /*   340 */    25,   67,   41,   90,   43,   44,   45,   46,   47,   48,
 /*   350 */    24,   67,   26,   27,   28,   29,   81,   31,   32,   33,
 /*   360 */    34,   67,   36,   37,   67,   67,   81,   41,   81,   43,
 /*   370 */    44,   45,   46,   47,   48,   24,   67,   26,   27,   28,
 /*   380 */    29,   67,   31,   32,   33,   34,   67,   36,   37,   67,
 /*   390 */    67,   67,   41,   92,   43,   44,   45,   46,   47,   48,
 /*   400 */    24,   67,   26,   27,   28,   29,   67,   31,   32,   33,
 /*   410 */    34,   92,   36,   37,   92,   92,   92,   41,   92,   43,
 /*   420 */    44,   45,   46,   47,   48,   24,   92,   26,   27,   28,
 /*   430 */    29,   92,   31,   32,   33,   34,   92,   36,   37,   92,
 /*   440 */    92,   92,   41,   92,   43,   44,   45,   46,   47,   48,
 /*   450 */    24,   92,   26,   27,   28,   29,   13,   31,   32,   33,
 /*   460 */    34,   92,   36,   37,   92,   92,   92,   41,   25,   43,
 /*   470 */    44,   45,   46,   47,   48,    3,    4,    5,    6,    7,
 /*   480 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   490 */    18,   19,   24,   92,   26,   27,   28,   29,   92,   31,
 /*   500 */    32,   33,   34,   92,   36,   37,   29,   64,   31,   41,
 /*   510 */    81,   43,   44,   45,   46,   47,   48,   88,   25,   90,
 /*   520 */    92,   24,   92,   26,   27,   28,   29,   55,   31,   32,
 /*   530 */    33,   34,   39,   36,   37,   92,   59,   92,   41,   92,
 /*   540 */    43,   44,   45,   46,   47,   48,   24,   92,   26,   27,
 /*   550 */    28,   29,   92,   31,   32,   33,   34,   92,   36,   37,
 /*   560 */    92,   30,   92,   41,   18,   43,   44,   45,   46,   47,
 /*   570 */    48,    3,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   580 */    12,   13,   14,   15,   16,   17,   18,   19,   57,   58,
 /*   590 */    92,   60,   61,   25,   24,   49,   26,   27,   92,   29,
 /*   600 */    92,   31,   32,   33,   34,   92,   36,   37,   92,   92,
 /*   610 */    92,   41,   92,   43,   44,   45,   46,   47,   48,    3,
 /*   620 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   630 */    14,   15,   16,   17,   18,   19,    4,    5,    6,    7,
 /*   640 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   650 */    18,   19,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   660 */    13,   14,   15,   16,   17,   18,   19,   13,   71,   92,
 /*   670 */     2,   29,   92,   31,   29,   70,   31,   92,   81,   25,
 /*   680 */    92,   13,   85,   29,   30,   31,   81,   90,   83,   92,
 /*   690 */    85,   46,   38,   92,   89,   90,   91,   29,   92,   31,
 /*   700 */    46,   59,   11,   81,   59,   51,   52,   53,   54,   92,
 /*   710 */    88,   92,   90,   59,   46,   92,   92,   92,   64,   51,
 /*   720 */    52,   53,   54,   92,   56,   92,   92,   59,   92,   38,
 /*   730 */    69,   92,   64,   72,   73,   74,   75,   76,   77,   78,
 /*   740 */    79,   80,   92,   92,   13,   84,   92,   86,   57,   58,
 /*   750 */    92,   60,   61,   13,   92,   70,   25,   92,   92,   92,
 /*   760 */    29,   30,   31,   92,   92,   25,   81,   92,   83,   29,
 /*   770 */    85,   31,   92,   92,   89,   90,   91,   46,   38,   92,
 /*   780 */    35,   92,   51,   52,   53,   54,   46,   92,   92,   92,
 /*   790 */    59,   51,   52,   53,   54,   64,   13,   92,   70,   59,
 /*   800 */    92,   92,   57,   58,   64,   60,   61,   13,   25,   81,
 /*   810 */    13,   83,   29,   85,   31,   92,   92,   89,   90,   91,
 /*   820 */    92,   38,   25,   29,   92,   31,   29,   92,   31,   46,
 /*   830 */    92,   92,   92,   92,   51,   52,   53,   54,   92,   92,
 /*   840 */    46,   92,   59,   46,   92,   92,   92,   64,   51,   52,
 /*   850 */    53,   54,   92,   59,   92,   92,   59,   13,   64,   92,
 /*   860 */    25,   64,   92,   70,   29,   92,   31,   92,   92,   25,
 /*   870 */    92,   13,   92,   29,   81,   31,   83,   92,   85,   92,
 /*   880 */     1,   46,   89,   90,   91,   92,   92,   29,   92,   31,
 /*   890 */    46,   92,   92,   92,   59,   51,   52,   53,   54,   20,
 /*   900 */    21,   22,   92,   59,   46,    1,   92,   92,   64,   51,
 /*   910 */    52,   53,   54,   92,   92,   92,   92,   59,   13,   92,
 /*   920 */    70,   92,   64,   92,   20,   21,   22,   70,   92,   92,
 /*   930 */    92,   81,   70,   83,   29,   85,   31,   92,   81,   89,
 /*   940 */    90,   91,   85,   81,   92,   92,   89,   90,   91,   87,
 /*   950 */    88,   46,   90,   91,   92,   70,   51,   52,   53,   54,
 /*   960 */    92,   92,   92,   92,   59,   92,   81,   70,   83,   64,
 /*   970 */    85,   92,   92,   92,   89,   90,   91,   92,   81,   70,
 /*   980 */    83,   92,   85,   92,   92,   92,   89,   90,   91,   92,
 /*   990 */    81,   70,   83,   92,   85,   92,   92,   92,   89,   90,
 /*  1000 */    91,   92,   81,   92,   83,   70,   85,   92,   92,   92,
 /*  1010 */    89,   90,   91,   92,   92,   92,   81,   92,   83,   92,
 /*  1020 */    85,   50,   70,   92,   89,   90,   91,   92,   57,   58,
 /*  1030 */    25,   60,   61,   81,   63,   70,   25,   85,   70,   92,
 /*  1040 */    11,   89,   90,   91,   25,   92,   81,   92,   92,   81,
 /*  1050 */    85,   92,   92,   85,   89,   90,   91,   89,   90,   91,
 /*  1060 */    92,   92,   57,   58,   71,   60,   61,   92,   57,   58,
 /*  1070 */    92,   60,   61,   92,   81,   82,   57,   58,   85,   60,
 /*  1080 */    61,   25,   92,   90,   71,   92,   57,   58,   92,   60,
 /*  1090 */    61,   92,   92,   30,   81,   82,   92,   92,   85,   92,
 /*  1100 */    25,   92,   92,   90,   92,   15,   16,   17,   18,   19,
 /*  1110 */    25,   92,   92,   57,   58,   71,   60,   61,   92,   92,
 /*  1120 */    57,   58,   92,   60,   61,   81,   82,   92,    1,   85,
 /*  1130 */    50,    1,   57,   58,   90,   60,   61,   57,   58,    1,
 /*  1140 */    60,   61,   57,   58,    1,   60,   61,   20,   21,   22,
 /*  1150 */    20,   21,   22,    1,   92,   92,   92,   92,   20,   21,
 /*  1160 */    22,    1,   92,   20,   21,   22,   57,   58,    1,   60,
 /*  1170 */    61,    1,   20,   21,   22,    1,   92,   92,   92,   92,
 /*  1180 */    20,   21,   22,    1,   92,   92,   92,   20,   21,   22,
 /*  1190 */    20,   21,   22,    1,   20,   21,   22,   71,    1,   92,
 /*  1200 */    92,   92,   20,   21,   22,   92,    1,   81,   92,   92,
 /*  1210 */    71,   85,   20,   21,   22,   92,   90,   20,   21,   22,
 /*  1220 */    81,   71,   71,   92,   85,   20,   21,   22,   92,   90,
 /*  1230 */    92,   81,   81,   71,    1,   85,   85,    1,   92,   92,
 /*  1240 */    90,   90,    1,   81,   92,    1,   92,   85,   92,    1,
 /*  1250 */    92,   92,   90,   20,   21,   22,   20,   21,   22,    1,
 /*  1260 */    92,   20,   21,   22,   20,   21,   22,    1,   20,   21,
 /*  1270 */    22,    1,   92,   92,   92,   92,   92,   92,   20,   21,
 /*  1280 */    22,   92,   92,   92,   92,   92,   20,   21,   22,   92,
 /*  1290 */    20,   21,   22,
);
    const YY_SHIFT_USE_DFLT = -25;
    const YY_SHIFT_MAX = 189;
    static public $yy_shift_ofst = array(
 /*     0 */   -25,  101,   51,  -24,   76,    1,   26,  468,  497,  522,
 /*    10 */   351,  426,  201,  226,  176,  151,  126,  276,  376,  326,
 /*    20 */   401,  301,  251,  570,  668,  668,  668,  668,  668,  668,
 /*    30 */   668,  668,  668,  668,  905,  905,  905,  905,  794,  731,
 /*    40 */   844,  797,  654,  740,  783,  858,  858,  858,  858,  858,
 /*    50 */   794,  794,  645,  645,  645,  645,  794,  645,  835, 1270,
 /*    60 */  1258,  645, 1236, 1233, 1241, 1244, 1248, 1205,  904,  879,
 /*    70 */  1130, 1127, 1182, 1174, 1170,  645,  645,  645, 1167, 1143,
 /*    80 */   645, 1160,  645,  645, 1152, 1138,  645, 1192,  645,  645,
 /*    90 */  1197, 1266,  443,   61,  -25,  -25,  -25,  -25,  -25,  -25,
 /*   100 */   -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
 /*   110 */   -25,  -25,  -25,  -25,  -25,  -25,  568,  472,  616,  616,
 /*   120 */   632,  647,  647,  691,  971, 1029, 1075, 1090, 1080, 1085,
 /*   130 */  1056,  745, 1005,  531, 1019, 1011, 1063, 1109, 1109, 1109,
 /*   140 */   642,  477,  143,  193,  168,  493,  118,  546,  171,  206,
 /*   150 */   191,  189,  190,  243,  261,  231,  236,  240,  156,   39,
 /*   160 */    41,   -9,   31,  141,   56,   30,  315,   81,  133,  -19,
 /*   170 */   -23,  121,  241,  148,  166,  215,  214,  211,  216,  181,
 /*   180 */   218,  256,  164,  239,  264,   14,    6,  -11,  131,  114,
);
    const YY_REDUCE_USE_DFLT = -81;
    const YY_REDUCE_MAX = 115;
    static public $yy_reduce_ofst = array(
 /*     0 */    98,  661,  661,  661,  661,  661,  661,  661,  661,  661,
 /*    10 */   661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
 /*    20 */   661,  661,  661,  661,  850,  909,  685,  605,  897,  921,
 /*    30 */   885,  793,  935,  728,  968,  857,  965,  952,  862,  993,
 /*    40 */  1013, 1044, 1151, 1151, 1151, 1162, 1150, 1139, 1126,  597,
 /*    50 */   622,  429,  -30,   -5,   20,  -55,   50,  -80,  287,  222,
 /*    60 */   222,  285,  222,  222,  222,  222,  222,  222,  222,  222,
 /*    70 */   222,  222,  222,  222,  222,  237,  225,  210,  222,  222,
 /*    80 */   212,  222,  170,  275,  222,  222,  233,  222,  255,  250,
 /*    90 */   222,  222,  253,  254,  284,  274,  259,  234,  209,  244,
 /*   100 */   249,  248,  294,  334,  323,  324,  339,  319,  322,  298,
 /*   110 */   297,  314,  309,   22,   59,   49,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(),
        /* 1 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, ),
        /* 2 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 48, ),
        /* 3 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, ),
        /* 4 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, ),
        /* 5 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, ),
        /* 6 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, ),
        /* 7 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 8 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 9 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 10 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 11 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 12 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 13 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 14 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 15 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 16 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 17 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 18 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 19 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 20 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 21 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 22 */ array(24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 23 */ array(24, 26, 27, 29, 31, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 47, 48, ),
        /* 24 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 25 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 26 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 27 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 28 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 29 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 30 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 31 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 32 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 33 */ array(2, 13, 29, 31, 46, 51, 52, 53, 54, 56, 59, 64, ),
        /* 34 */ array(13, 29, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 35 */ array(13, 29, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 36 */ array(13, 29, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 37 */ array(13, 29, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 38 */ array(13, 29, 31, 46, 59, 64, ),
        /* 39 */ array(13, 25, 29, 30, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 40 */ array(13, 25, 29, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 41 */ array(13, 25, 29, 31, 46, 51, 52, 53, 54, 59, 64, ),
        /* 42 */ array(13, 25, 29, 30, 31, 38, 46, 51, 52, 53, 54, 59, 64, ),
        /* 43 */ array(13, 25, 2